{"version":3,"sources":["fbase.js","routes/Profile.js","components/AuthForm.js","routes/Auth.js","components/Twitter.js","components/TwitterFactory.js","routes/Home.js","components/Navigation.js","components/Router.js","components/App.js","index.js"],"names":["firebase","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","authService","auth","firebaseInstance","dbService","firestore","storageService","storage","userObj","refreshUser","history","useHistory","useState","displayName","newDisplayName","setNewDisplayName","getMyTwitters","a","collection","where","uid","orderBy","get","onSubmit","event","preventDefault","updateProfile","useEffect","className","onChange","value","target","type","placeholder","onClick","push","signOut","AuthForm","email","setEmail","password","setPassword","newAccount","setNewAccount","setError","name","createUserWithEmailAndPassword","signInWithEmailAndPassword","message","required","prev","Auth","onSocialClick","provider","GoogleAuthProvider","signInWithPopup","data","console","log","icon","faTwitter","color","size","style","marginBottom","faGoogle","Twitter","twitterObj","isOwner","editing","setEditing","text","newTwitter","setNewTwitter","onDeleteClick","window","confirm","doc","id","delete","refFromURL","attachmentUrl","toggleEdit","update","src","width","height","borderRadius","marginRight","faTrash","faPencilAlt","TwitterFactory","twitter","setTwitter","attachment","setAttachment","attachmentRef","ref","child","uuidv4","putString","response","getDownloadURL","createId","Date","now","creatorId","add","maxLength","for","faPlus","cursor","accept","theFile","files","reader","FileReader","onloadend","finishedEvent","result","currentTarget","readAsDataURL","opacity","backgroundImage","faTimes","Home","twitters","setTwitters","onSnapshot","snapshot","twitterArray","docs","map","Navigation","display","justifyContent","marginTop","to","flexDirection","alignItems","fontSize","faUser","AppRouter","isLoggedIn","exact","path","Profile","App","init","setInit","setUserObj","onAuthStateChanged","user","args","Boolean","currentUser","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.22792eb7.chunk.js","sourcesContent":["import firebase from \"firebase/app\";\r\nimport \"firebase/auth\";\r\nimport \"firebase/firestore\";\r\nimport \"firebase/storage\";\r\n\r\nvar firebaseConfig = {\r\n  apiKey: \"AIzaSyBLxIil33acaUASe-y_FR66n2MxiXx9VNs\",\r\n  authDomain: \"twitter-596cd.firebaseapp.com\",\r\n  projectId: \"twitter-596cd\",\r\n  storageBucket: \"twitter-596cd.appspot.com\",\r\n  messagingSenderId: \"1004321409732\",\r\n  appId: \"1:1004321409732:web:1710eca8fa85b0528fd791\",\r\n};\r\n\r\nfirebase.initializeApp(firebaseConfig);\r\n\r\nexport const authService = firebase.auth();\r\n\r\nexport const firebaseInstance = firebase;\r\n\r\nexport const dbService = firebase.firestore();\r\n\r\nexport const storageService = firebase.storage();\r\n","import React, { useEffect, useState } from \"react\";\r\nimport { authService, dbService } from \"fbase\";\r\nimport { useHistory } from \"react-router-dom\";\r\n\r\nexport default ({ userObj, refreshUser }) => {\r\n  const history = useHistory();\r\n  const [newDisplayName, setNewDisplayName] = useState(userObj.displayName);\r\n  const onLogoutClick = () => {\r\n    history.push(\"/\");\r\n    authService.signOut();\r\n  };\r\n  const getMyTwitters = async () => {\r\n    const twitters = await dbService\r\n      .collection(\"twitters\")\r\n      .where(\"creatorId\", \"==\", userObj.uid)\r\n      .orderBy(\"createdAt\")\r\n      .get();\r\n  };\r\n  const onChange = (event) => {\r\n    const {\r\n      target: { value },\r\n    } = event;\r\n    setNewDisplayName(value);\r\n  };\r\n  const onSubmit = async (event) => {\r\n    event.preventDefault();\r\n    if (userObj.displayName !== newDisplayName) {\r\n      await userObj.updateProfile({\r\n        displayName: newDisplayName,\r\n      });\r\n      refreshUser();\r\n    }\r\n  };\r\n  useEffect(() => {\r\n    getMyTwitters();\r\n  }, []);\r\n\r\n  return (\r\n    <div className=\"profileContainer\">\r\n      <form onSubmit={onSubmit} className=\"profileForm\">\r\n        <input\r\n          onChange={onChange}\r\n          type=\"text\"\r\n          placeholder=\"Display name\"\r\n          value={newDisplayName}\r\n          className=\"profileInput\"\r\n        />\r\n        <input type=\"submit\" value=\"Update Profile\" className=\"profileSubmit\" />\r\n      </form>\r\n      <button onClick={onLogoutClick} className=\"profileBtn\">\r\n        Log Out\r\n      </button>\r\n    </div>\r\n  );\r\n};\r\n","import { authService } from \"fbase\";\r\nimport React, { useState } from \"react\";\r\n\r\nconst AuthForm = () => {\r\n  const [email, setEmail] = useState(\"\");\r\n  const [password, setPassword] = useState(\"\");\r\n  const [newAccount, setNewAccount] = useState(true);\r\n  const [error, setError] = useState();\r\n\r\n  const onChange = (event) => {\r\n    const {\r\n      target: { name, value },\r\n    } = event;\r\n\r\n    if (name === \"email\") {\r\n      setEmail(value);\r\n    } else if (name === \"password\") {\r\n      setPassword(value);\r\n    }\r\n  };\r\n\r\n  const onSubmit = async (event) => {\r\n    event.preventDefault();\r\n    try {\r\n      let data;\r\n      if (newAccount) {\r\n        data = await authService.createUserWithEmailAndPassword(\r\n          email,\r\n          password\r\n        );\r\n      } else {\r\n        data = await authService.signInWithEmailAndPassword(email, password);\r\n      }\r\n    } catch (error) {\r\n      setError(error.message);\r\n    }\r\n  };\r\n\r\n  const toggleAccount = () => setNewAccount((prev) => !prev);\r\n  return (\r\n    <>\r\n      <form onSubmit={onSubmit} className=\"container\">\r\n        <input\r\n          type=\"email\"\r\n          name=\"email\"\r\n          className=\"authInput\"\r\n          onChange={onChange}\r\n          placeholder=\"Email\"\r\n          value={email}\r\n          required\r\n        />\r\n        <input\r\n          type=\"password\"\r\n          name=\"password\"\r\n          className=\"authInput\"\r\n          onChange={onChange}\r\n          placeholder=\"Password\"\r\n          value={password}\r\n          required\r\n        />\r\n        <input\r\n          type=\"submit\"\r\n          value={newAccount ? \"Create Account\" : \"Log In\"}\r\n          className=\"authInput authSubmit\"\r\n        />\r\n      </form>\r\n      <span onClick={toggleAccount} className=\"authSwitch\">\r\n        {newAccount ? \"Sign In\" : \"Create Account\"}\r\n      </span>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default AuthForm;\r\n","import AuthForm from \"components/AuthForm\";\r\nimport { authService, firebaseInstance } from \"fbase\";\r\nimport React from \"react\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faTwitter, faGoogle } from \"@fortawesome/free-brands-svg-icons\";\r\n\r\nconst Auth = () => {\r\n  const onSocialClick = async (event) => {\r\n    const {\r\n      target: { name },\r\n    } = event;\r\n    let provider;\r\n    if (name === \"google\") {\r\n      provider = new firebaseInstance.auth.GoogleAuthProvider();\r\n    }\r\n    const data = await authService.signInWithPopup(provider);\r\n    console.log(data);\r\n  };\r\n\r\n  return (\r\n    <div className=\"authContainer\">\r\n      <FontAwesomeIcon\r\n        icon={faTwitter}\r\n        color={\"#04AAFF\"}\r\n        size=\"3x\"\r\n        style={{ marginBottom: 30 }}\r\n      />\r\n      <AuthForm />\r\n      <div className=\"authBtn\">\r\n        <button onClick={onSocialClick} name=\"google\" className=\"authBtn_g\">\r\n          {\" \"}\r\n          Contiune to Google <FontAwesomeIcon icon={faGoogle} />\r\n        </button>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\nexport default Auth;\r\n","import { dbService, storageService } from \"fbase\";\r\nimport React, { useState } from \"react\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faTrash, faPencilAlt } from \"@fortawesome/free-solid-svg-icons\";\r\n\r\nconst Twitter = ({ twitterObj, isOwner }) => {\r\n  const [editing, setEditing] = useState(false);\r\n  const [newTwitter, setNewTwitter] = useState(twitterObj.text);\r\n  const onDeleteClick = async () => {\r\n    const ok = window.confirm(\"Are you sure you want to delete this twitter?\");\r\n    if (ok) {\r\n      await dbService.doc(`twitters/${twitterObj.id}`).delete();\r\n      await storageService.refFromURL(twitterObj.attachmentUrl).delete();\r\n    }\r\n  };\r\n\r\n  const toggleEdit = () => setEditing((prev) => !prev);\r\n  const onSubmit = async (event) => {\r\n    event.preventDefault();\r\n    await dbService.doc(`twitters/${twitterObj.id}`).update({\r\n      text: newTwitter,\r\n    });\r\n    setEditing(false);\r\n  };\r\n  const onChange = (event) => {\r\n    const {\r\n      target: { value },\r\n    } = event;\r\n    setNewTwitter(value);\r\n  };\r\n  return (\r\n    <div className=\"twitter\">\r\n      {editing ? (\r\n        <div className=\"twitterEdit\">\r\n          <form onSubmit={onSubmit} className=\"twitterEditContainer\">\r\n            <input\r\n              type=\"text\"\r\n              placeholder=\"Edit your twitter\"\r\n              value={newTwitter}\r\n              onChange={onChange}\r\n              required\r\n              className=\"twitterEditInput\"\r\n            />\r\n            <input\r\n              type=\"submit\"\r\n              value=\"Update Twitter\"\r\n              className=\"twitterEditSubmit\"\r\n            />\r\n          </form>\r\n          <button onClick={toggleEdit} className=\"twitterEditBtn\">\r\n            Cancel\r\n          </button>\r\n        </div>\r\n      ) : (\r\n        <div className=\"twitterList\">\r\n          <h4>{twitterObj.text}</h4>\r\n          <div>\r\n            {twitterObj.attachmentUrl && (\r\n              <img\r\n                src={twitterObj.attachmentUrl}\r\n                width=\"60px\"\r\n                height=\"60px\"\r\n                style={{\r\n                  borderRadius: \"50%\",\r\n                }}\r\n              />\r\n            )}\r\n          </div>\r\n          {isOwner && (\r\n            <div className=\"twitterIsOwner\">\r\n              <button onClick={onDeleteClick} style={{ marginRight: \"10px\" }}>\r\n                <FontAwesomeIcon icon={faTrash} />\r\n              </button>\r\n              <button onClick={toggleEdit}>\r\n                <FontAwesomeIcon icon={faPencilAlt} />\r\n              </button>\r\n            </div>\r\n          )}\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Twitter;\r\n","import { dbService, storageService } from \"fbase\";\r\nimport React, { useState } from \"react\";\r\nimport { v4 as uuidv4 } from \"uuid\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faPlus, faTimes } from \"@fortawesome/free-solid-svg-icons\";\r\n\r\nconst TwitterFactory = ({ userObj }) => {\r\n  const [twitter, setTwitter] = useState(\"\");\r\n  const [attachment, setAttachment] = useState(\"\");\r\n\r\n  const onSubmit = async (event) => {\r\n    event.preventDefault();\r\n    let attachmentUrl = \"\";\r\n    if (attachment !== \"\") {\r\n      const attachmentRef = storageService\r\n        .ref()\r\n        .child(`${userObj.uid}/${uuidv4()}`);\r\n      const response = await attachmentRef.putString(attachment, \"data_url\");\r\n      attachmentUrl = await response.ref.getDownloadURL();\r\n    }\r\n    const twitterObj = {\r\n      text: twitter,\r\n      createId: Date.now(),\r\n      creatorId: userObj.uid,\r\n      attachmentUrl,\r\n    };\r\n    await dbService.collection(\"twitters\").add(twitterObj);\r\n    setTwitter(\"\");\r\n    setAttachment(\"\");\r\n  };\r\n  const onChange = (event) => {\r\n    const {\r\n      target: { value },\r\n    } = event;\r\n    setTwitter(value);\r\n  };\r\n  const onFileChange = (event) => {\r\n    const {\r\n      target: { files },\r\n    } = event;\r\n    const theFile = files[0];\r\n    const reader = new FileReader();\r\n    reader.onloadend = (finishedEvent) => {\r\n      const {\r\n        currentTarget: { result },\r\n      } = finishedEvent;\r\n      setAttachment(result);\r\n    };\r\n    reader.readAsDataURL(theFile);\r\n  };\r\n  const onClearAttachment = () => setAttachment(\"\");\r\n  return (\r\n    <form onSubmit={onSubmit} className=\"factoryForm\">\r\n      <div className=\"factoryMessage\">\r\n        <input\r\n          type=\"text\"\r\n          placeholder=\"make your message\"\r\n          value={twitter}\r\n          onChange={onChange}\r\n          maxLength={120}\r\n          className=\"factoryInput\"\r\n        />\r\n        <input type=\"submit\" value=\"&rarr;\" className=\"factorySubmit\" />\r\n      </div>\r\n      <div className=\"factoryFile\">\r\n        <label for=\"factoryInputFile\">\r\n          <span className=\"factoryInputFile_span\">Add photos</span>\r\n          <FontAwesomeIcon\r\n            icon={faPlus}\r\n            style={{ color: \"#04aaff\", cursor: \"pointer\" }}\r\n          />\r\n        </label>\r\n        <input\r\n          type=\"file\"\r\n          accept=\"image/*\"\r\n          onChange={onFileChange}\r\n          id=\"factoryInputFile\"\r\n          style={{ opacity: 0 }}\r\n        />\r\n        {attachment && (\r\n          <div className=\"factoryAttachment\">\r\n            <img src={attachment} style={{ backgroundImage: attachment }} />\r\n            <div\r\n              onClick={onClearAttachment}\r\n              className=\"factoryAttachmentRemove\"\r\n            >\r\n              <span>Remove</span>\r\n              <FontAwesomeIcon icon={faTimes} />\r\n            </div>\r\n          </div>\r\n        )}\r\n      </div>\r\n    </form>\r\n  );\r\n};\r\n\r\nexport default TwitterFactory;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport { dbService } from \"fbase\";\r\nimport Twitter from \"components/Twitter\";\r\nimport TwitterFactory from \"components/TwitterFactory\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\n\r\nconst Home = ({ userObj }) => {\r\n  const [twitters, setTwitters] = useState([]);\r\n  useEffect(() => {\r\n    dbService\r\n      .collection(\"twitters\")\r\n      .orderBy(\"createId\", \"desc\")\r\n      .onSnapshot((snapshot) => {\r\n        const twitterArray = snapshot.docs.map((doc) => ({\r\n          id: doc.id,\r\n          ...doc.data(),\r\n        }));\r\n        setTwitters(twitterArray);\r\n      });\r\n  }, []);\r\n\r\n  return (\r\n    <div className=\"homeContainer\">\r\n      <TwitterFactory userObj={userObj} />\r\n      <div>\r\n        {twitters.map((twitter) => (\r\n          <Twitter\r\n            key={twitter.id}\r\n            twitterObj={twitter}\r\n            isOwner={twitter.creatorId === userObj.uid}\r\n          />\r\n        ))}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\nexport default Home;\r\n","import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faTwitter } from \"@fortawesome/free-brands-svg-icons\";\r\nimport { faUser } from \"@fortawesome/free-solid-svg-icons\";\r\n\r\nconst Navigation = ({ userObj }) => {\r\n  return (\r\n    <nav>\r\n      <ul\r\n        style={{\r\n          display: \"flex\",\r\n          justifyContent: \"center\",\r\n          marginTop: \"50px\",\r\n        }}\r\n      >\r\n        <li style={{ marginRight: \"30px\" }}>\r\n          <Link to=\"/\">\r\n            <FontAwesomeIcon icon={faTwitter} size=\"2x\" color={\"#04AAFF\"} />\r\n          </Link>\r\n        </li>\r\n        <li>\r\n          <Link\r\n            to=\"/Profile\"\r\n            style={{\r\n              display: \"flex\",\r\n              flexDirection: \"column\",\r\n              alignItems: \"center\",\r\n              fontSize: \"12px\",\r\n            }}\r\n          >\r\n            <FontAwesomeIcon icon={faUser} color={\"#04AAFF\"} size=\"2x\" />\r\n            <span style={{ marginTop: 10, color: \"white\" }}>\r\n              {userObj.displayName\r\n                ? `${userObj.displayName}의 Profile`\r\n                : \"Profile\"}\r\n            </span>\r\n          </Link>\r\n        </li>\r\n      </ul>\r\n    </nav>\r\n  );\r\n};\r\n\r\nexport default Navigation;\r\n","import React from \"react\";\r\nimport { HashRouter as Router, Route, Switch } from \"react-router-dom\";\r\nimport Profile from \"routes/Profile\";\r\nimport Auth from \"../routes/Auth\";\r\nimport Home from \"../routes/Home\";\r\nimport Navigation from \"./Navigation\";\r\n\r\nconst AppRouter = ({ isLoggedIn, userObj, refreshUser }) => {\r\n  return (\r\n    <Router>\r\n      {isLoggedIn && <Navigation userObj={userObj} />}\r\n      <Switch>\r\n        {isLoggedIn ? (\r\n          <>\r\n            <Route exact path=\"/\">\r\n              <Home userObj={userObj} />\r\n            </Route>\r\n            <Route exact path=\"/profile\">\r\n              <Profile userObj={userObj} refreshUser={refreshUser} />\r\n            </Route>\r\n          </>\r\n        ) : (\r\n          <>\r\n            <Route exact path=\"/\">\r\n              <Auth />\r\n            </Route>\r\n          </>\r\n        )}\r\n      </Switch>\r\n    </Router>\r\n  );\r\n};\r\n\r\nexport default AppRouter;\r\n","import React, { useEffect, useState } from \"react\";\nimport AppRouter from \"components/Router\";\nimport { authService } from \"fbase\";\n\nfunction App() {\n  const [init, setInit] = useState(false);\n  const [userObj, setUserObj] = useState(null);\n  useEffect(() => {\n    authService.onAuthStateChanged((user) => {\n      if (user) {\n        setUserObj({\n          displayName: user.displayName,\n          uid: user.uid,\n          updateProfile: (args) => user.updateProfile(args),\n        });\n      } else {\n        setUserObj(null);\n      }\n      setInit(true);\n    });\n  }, []);\n\n  const refreshUser = () => {\n    const user = authService.currentUser;\n    setUserObj({\n      displayName: user.displayName,\n      uid: user.uid,\n      updateProfile: (args) => user.updateProfile(args),\n    });\n  };\n\n  return (\n    <>\n      {init ? (\n        <AppRouter\n          isLoggedIn={Boolean(userObj)}\n          userObj={userObj}\n          refreshUser={refreshUser}\n        />\n      ) : (\n        \"initializing...\"\n      )}\n    </>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./components/App\";\nimport \"./Styled.css\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}